/* -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Camp <dcamp@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIURI;
interface nsIDOMNode;
interface nsIDOMDocument;
interface nsIDOMLoadStatus;

[scriptable, uuid(e0785ebb-b3a1-426a-a70e-be2b923e973e)]
interface nsIOfflineCacheUpdateObserver : nsISupports {
  /**
   * An item has finished loading.
   *
   * @param aItem load status for the item that completed.
   */
  void itemCompleted(in nsIDOMLoadStatus aItem);
};

/**
 * An nsIOfflineCacheUpdate is used to update a domain's offline resources.
 * It can be used to perform partial or complete updates.
 *
 * Each update object maintains a list of nsIDOMLoadStatus items for the
 * resources it is updating.  The list of these items will be available
 * after the object is scheduled.
 *
 * One update object will be updating at a time.  The active object will
 * load its items one by one, sending itemCompleted() to any registered
 * observers.
 */
[scriptable, uuid(7dc06ede-1098-4384-b95e-65525ab254c9)]
interface nsIOfflineCacheUpdate : nsISupports {
  /**
   * The domain being updated, and the domain that will own any URIs added
   * with this update.
   */
  readonly attribute ACString updateDomain;

  /**
   * The URI that will own any URIs added by this update
   */
  readonly attribute ACString ownerURI;

  /**
   * Initialize the update.
   *
   * @param aPartialUpdate
   *        TRUE if the update should just update the URIs given to it,
   *        FALSE if all URLs for the owner domain should be added.
   * @param aUpdateDomain
   *        The domain which is being updated, and which will own any
   *        URIs added.
   * @param aOwnerURI
   *        The owner URI for any URIs added.
   * @param aReferrerURI
   *        The page that is requesting the update.
   */
  void init(in boolean aPartialUpdate,
            in ACString aUpdateDomain,
            in ACString aOwnerURI,
            in nsIURI aReferrerURI);

  /**
   * Add a URI to the offline cache as part of the update.
   *
   * @param aURI
   *        The URI to add.
   * @param aSource
   *        The DOM node (<link> tag) associated with this node (for
   *        implementing nsIDOMLoadStatus).
   */
  void addURI(in nsIURI aURI, in nsIDOMNode aSource);

  /**
   * Add the update to the offline update queue.  An offline-cache-update-added
   * event will be sent to the observer service.
   */
  void schedule();

  /**
   * Request that the update be scheduled when a document finishes loading.
   *
   * @param aDocument
   *        When this document finishes loading, the update will be scheduled.
   */
  void scheduleOnDocumentStop(in nsIDOMDocument aDocument);

  /**
   * Access to the list of items in the update.
   */
  readonly attribute unsigned long count;
  nsIDOMLoadStatus item(in unsigned long index);

  /**
   * Observe loads that are added to the update.
   *
   * @param aObserver
   *        object that notifications will be sent to.
   * @param aHoldWeak
   *        TRUE if you want the update to hold a weak reference to the
   *        observer, FALSE for a strong reference.
   */
  void addObserver(in nsIOfflineCacheUpdateObserver aObserver,
                   in boolean aHoldWeak);

  /**
   * Remove an observer from the update.
   *
   * @param aObserver
   *        the observer to remove.
   */
  void removeObserver(in nsIOfflineCacheUpdateObserver aObserver);
};

[scriptable, uuid(f99ca10f-5cde-4966-b845-433f2921a201)]
interface nsIOfflineCacheUpdateService : nsISupports {
    /**
     * Access to the list of cache updates that have been scheduled.
     */
    readonly attribute unsigned long numUpdates;
    nsIOfflineCacheUpdate getUpdate(in unsigned long index);
};
