/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Original Author: Aaron Leventhal (aaronl@netscape.com)
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIAccessible;
interface nsIAccessibleEvent;

[uuid(af05f83c-6fd2-48c1-b1c3-811857472421)]
interface nsPIAccessible : nsISupports
{
  /**
   * Set accessible parent.
   */
  void setParent(in nsIAccessible aAccParent);

  /**
   * Set first accessible child.
   */
  void setFirstChild(in nsIAccessible aAccFirstChild);

  /**
   * Set next sibling accessible.
   */
  void setNextSibling(in nsIAccessible aAccNextSibling);

  /**
   * Return parent accessible only if cached.
   */
  void getCachedParent(out nsIAccessible aAccParent);

  /**
   * Return first child accessible only if cached.
   */
  void getCachedFirstChild(out nsIAccessible aAccFirstChild);

  /**
   * Set the child count to -1 (unknown) and null out cached child pointers
   */
  void invalidateChildren();

  /**
   * Fire accessible event.
   *
   * @param aEvent - DOM event
   * @param aTarget - target of DOM event
   * @param aData - additional information for accessible event.
   *
   * XXX: eventually this method will be removed (see bug 377022)
   */
  void fireToolkitEvent(in unsigned long aEvent, in nsIAccessible aTarget,
                        in voidPtr aData);

  /**
   * Fire accessible event.
   */
  void fireAccessibleEvent(in nsIAccessibleEvent aAccEvent);

  /**
   * Return true if there are accessible children in anonymous content
   */
  readonly attribute boolean allowsAnonChildAccessibles;

  /**
   * Assert if child not in parent's cache.
   */
  void testChildCache(in nsIAccessible aCachedChild);

  /**
   * Returns text of accessible if accessible has text role otherwise empty
   * string.
   */
  void appendTextTo(out AString aString, in unsigned long aStartOffset,
                    in unsigned long aLength);
};

