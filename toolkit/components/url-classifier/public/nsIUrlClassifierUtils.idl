/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Google, Inc.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
/**
 * Some utility methods used by the url classifier.
 */

[scriptable, uuid(89ea43b0-a23f-4db2-8d23-6d90dc55f67a)]
interface nsIUrlClassifierUtils : nsISupports
{
  /**
   * Canonicalize a URL.  DON'T USE THIS DIRECTLY.  Use
   * PROT_EnchashDecrypter.prototype.getCanonicalUrl instead.  This method
   * url-decodes a string, but it doesn't normalize the hostname.  The method
   * in EnchashDecrypter first calls this method, then normalizes the hostname.
   *
   * @param url String to canonicalize
   *
   * @returns String containing the canonicalized url (maximally url-decoded,
   *          then specially url-encoded)
   */
  ACString canonicalizeURL(in ACString url);

  /**
   * When canonicalizing hostnames, the final step is to url escape everything that
   * is not alphanumeric or hyphen or dot.  The existing methods (escape,
   * encodeURIComponent and encodeURI are close, but not exactly what we want
   * so we write our own function to do this.
   */
  ACString escapeHostname(in ACString hostname);
};
