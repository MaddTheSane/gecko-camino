<?xml version="1.0"?> 

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://global/content/commonDialog.css" type="text/css"?>

<!DOCTYPE dialog SYSTEM "chrome://global/locale/commonDialog.dtd">

<dialog id="commonDialog"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
        role="alert"
        onload="commonDialogOnLoad();"
        ondialogaccept="return commonDialogOnAccept();"
        ondialogextra1="return commonDialogOnExtra1();"
        ondialogextra2="return commonDialogOnExtra2();"
        buttonpack="center"
        style="min-width: 29em; min-height: 8.5em; -moz-user-focus: ignore;"> 
    
  <script type="application/javascript" src="chrome://global/content/commonDialog.js"/>
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/>

  <commandset id="selectEditMenuItems">
    <command id="cmd_copy" oncommand="goDoCommand('cmd_copy')" disabled="true"/>
    <command id="cmd_selectAll" oncommand="goDoCommand('cmd_selectAll')"/>
  </commandset>

  <popupset id="contentAreaContextSet">
    <popup id="contentAreaContextMenu"
           onpopupshowing="goUpdateCommand('cmd_copy')">
      <menuitem id="context-copy"
                label="&copyCmd.label;"
                accesskey="&copyCmd.accesskey;"
                command="cmd_copy"
                disabled="true"/>
      <menuitem id="context-selectall"
                label="&selectAllCmd.label;"
                accesskey="&selectAllCmd.accesskey;"
                command="cmd_selectAll"/>
    </popup>
  </popupset>

  <hbox flex="1">
    <hbox align="start">
      <image id="info.icon" class="spaced"/>
    </hbox>
    
    <vbox flex="1" style="max-width: 45em;">
#ifdef XP_MACOSX
# On mac, we're exposing the dialog title inside the dialog
      <!-- Dialog title -->
      <description id="info.title" class="dialogTitle"/>
#endif
      <!-- text -->
      <description id="info.header" class="header"/>
      <vbox id="info.box">
        <description context="contentAreaContextMenu" tabindex="-1"/>
      </vbox>

      <!-- textboxes -->
      <vbox id="loginContainer" hidden="true">
        <label id="loginLabel" value="&editfield0.label;" control="loginTextbox"/>
        <textbox id="loginTextbox"/>
        <separator class="thin"/>
      </vbox>
      <vbox id ="password1Container" hidden="true">
        <label id="password1Label" value="&editfield1.label;" control="password1Textbox"/>
        <textbox type="password" id="password1Textbox"/>
        <separator class="thin"/>
      </vbox>
      <vbox id="password2Container" hidden="true">
        <label id="password2Label" value="&editfield2.label;" control="password2Textbox"/>
        <textbox type="password" id="password2Textbox"/>
        <separator class="thin"/>
      </vbox>
  
      <!-- checkbox -->
      <vbox id="checkboxContainer" align="start" collapsed="true">
        <checkbox id="checkbox" oncommand="onCheckboxClick(this);"/>
      </vbox>
    </vbox>
  </hbox>

  <!-- This method is called inline because it may unset hidden="true" on the
       above boxes, causing their frames to be build and bindings to load.  
       So, by calling this inline, we guarantee the textboxes and checkboxes 
       above will have their bindings before initButtons is called, and the
       dialog will be intrinsically sized correctly. -->
  <script type="application/javascript">showControls();</script>
</dialog>
